<?xml version="1.0"?>
<launch>

    <arg name="debug" default="false" />

    <!--Toyota parameters -->
    <arg name="namespace" default="/hero"/>
    <arg name="toyota_namespace" default="/hero"/>
    <arg name="use_hand_camera" default="true" />
    <arg name="use_head_center_camera" default="true" />
    <arg name="use_head_stereo_camera" default="true"/>
    <arg name="use_head_rgbd_sensor" default="true"/>
    <arg name="use_laser_odom" default="false"/>
    <arg name="use_blackfly" default="false" />
    <arg name="monitor" default="false" />
    <arg name="param_file" default="$(env HOME)/.ros/params.yaml" />
    <arg name="align_at_startup" default="true" />
    <arg name="auto_start" default="false" />
    <arg name="robot_name" default="hsrb" />
    <arg name="enable_emergency_stop" default="true" />

    <!-- robot desctription -->
    <include file="$(find hsrb_description)/robots/upload_hsrb.launch" />

    <group ns="$(arg namespace)">
        <!-- TUe custom description -->
        <rosparam file="$(find hero_description)/custom/joint_groups.yaml" command="load" />
        <rosparam file="$(find hero_description)/custom/skills.yaml" command="load" />
    </group>

    <group ns="$(arg toyota_namespace)">

        <remap from="robot_description" to="/robot_description" />
        <remap from="/diagnostics" to="$(arg toyota_namespace)/diagnostics" />

        <!-- Real sensors -->
        <group if="$(optenv ROBOT_REAL false)">

            <!-- joint_states -->
            <!-- joint state publisher(0.9.4 joint_state_controller) -->
            <node name="joint_state_pub" pkg="joint_state_publisher" type="joint_state_publisher">
                <param name="publish_default_velocities" value="true" />
                <param name="publish_default_efforts" value="true" />
                <param name="rate" value="50" />
                <rosparam subst_value="true">
                    source_list:
                        - $(arg toyota_namespace)/joint_states
                </rosparam>
            </node>

            <!-- robot state publisher -->
            <node name="robot_state_pub" pkg="robot_state_publisher" type="robot_state_publisher">
                <param name="publish_frequency" value="50.0" />
                <param name="use_tf_static" value="true" />
            </node>

            <!-- base range sensor -->
            <include file="$(find robot_launch_files)/launch/hardware/sensors/laser.launch">
                <arg name="name" value="base_laser"/>
                <arg name="machine" value="hsrb"/>
            </include>

            <!-- head rgbd sensor -->
            <include file="$(find hero_bringup)/launch/head_rgbd_sensor.launch">
                <arg name="namespace" value="$(arg toyota_namespace)"/>
            </include>

            <!-- hand force sensor -->
            <include file = "$(find hsrb_bringup)/launch/include/sensors/dynpick.xml"/>

        </group> <!-- End of real sensors group -->

    </group> <!-- End of Toyota namespace group -->

    <!-- Real hardware -->
    <group if="$(optenv ROBOT_REAL false)">
        <!-- MANAGERS: includes diagnostics -->
        <include file="$(find hsrb_bringup)/launch/$(arg robot_name)_monitor.launch" if="$(arg monitor)">
             <arg name="namespace" value="$(arg toyota_namespace)" />
        </include>

        <!--Hero hardware startup -->
        <include file="$(find hsrb_bringup)/launch/$(arg robot_name)_bringup.launch" unless="$(arg auto_start)">
          <arg name="namespace" value="$(arg toyota_namespace)" />
          <arg name="use_laser_odom" value="$(arg use_laser_odom)" />
          <arg name="align_at_startup" value="false" />
        </include>

        <!-- Manipulation -->
        <remap from="/joint_states" to="$(arg toyota_namespace)/joint_states" />

        <include file="$(find hsrb_common_launch)/launch/include/$(arg robot_name)_manipulation.xml">
            <arg name="namespace" value="$(arg toyota_namespace)"/>
            <arg name="sim" value="false"/>
            <arg name="robot_name" value="$(arg robot_name)"/>
        </include>

        <!-- align at start-->
        <group unless="$(arg auto_start)">
            <node if="$(arg align_at_startup)" pkg="hsrb_bringup" type="hsrb_align" name="hsrb_align" />
        </group>

    </group><!-- End of real hardware -->

    <!-- Launch simulator if we are not on a real robot -->
    <group unless="$(optenv ROBOT_REAL false)">

        <!-- Start gazebo with correct environment -->
        <include file="$(find hero_bringup)/launch/simulation/simulation.launch" >
            <arg name="namespace" value="$(arg namespace)" />
            <arg name="debug" value="$(arg debug)" />
            <arg name="use_laser_odom" value="$(arg use_laser_odom)" />
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="param_file" value="$(arg param_file)" />
        </include>

        <!-- Needed by manipulation bridge, because it uses the Toyota Robot_object -->
        <group ns="$(arg toyota_namespace)/impedance_control">
            <rosparam file="$(find hsrb_impedance_control)/launch/configurations.yaml" command="load" />
        </group>

    </group><!-- End of simulator group -->

    <!-- TU/e namespace group -->
    <group ns="$(arg namespace)">
        <include file="$(find robot_launch_files)/launch/manipulation/head.launch">
            <arg name="machine" value="hsrb"/>
        </include>
        <group ns="head_rgbd_sensor">
            <node pkg="rgbd" type="rgbd_server" name="ros_to_rgbd">
                <remap from="output" to="rgbd" />
                <remap from="rgb_image" to="rgb/image_color" />
                <remap from="cam_info" to="rgb/camera_info" />
                <remap from="depth_image" to="depth_registered/image" />

            </node>
        </group>
    </group><!-- End of TU/e namespace group -->

    <!-- bridge nodes-->
    <group ns="$(arg toyota_namespace)">
        <node pkg="hero_bridge" type="speech.py" name="text_to_speech"/>
        <node pkg="hero_bridge" type="joint_trajectory.py" name="arm_bridge"/>
        <node pkg="hero_bridge" type="gripper_controller.py" name="gripper_bridge"/>
        <node pkg="hero_bridge" type="tf_ghost.py" name="tf_ghost"/>
        <node pkg="hero_bridge" type="head_controller.py" name="head_bridge"/>
        <node pkg="hero_bridge" type="handover_detection.py" name="handoverdetector"/>
        <group unless="$(optenv ROBOT_REAL false)">
            <node pkg="hero_bridge" type="light_bridge.py" name="light_bridge"/>
        </group>
        <include file="$(find hero_bridge)/launch/manipulation_bridge.launch" />
    </group>


 </launch>
