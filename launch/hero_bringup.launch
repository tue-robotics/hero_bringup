<?xml version="1.0"?>
<launch>

    <arg name="debug" default="false" />

    <!--Toyota parameters -->
    <arg name="namespace" default="/hero"/>
    <arg name="use_hand_camera" default="false" />
    <arg name="use_head_center_camera" default="false" />
    <arg name="use_head_stereo_camera" default="false"/>
    <arg name="use_head_rgbd_sensor" default="true"/>
    <arg name="use_laser_odom" default="false"/>
    <arg name="use_blackfly" default="false" />
    <arg name="monitor" default="false" />
    <arg name="param_file" default="$(env HOME)/.ros/params.yaml" />
    <arg name="align_at_startup" default="true" />
    <arg name="auto_start" default="false" />
    <arg name="robot_name" default="hsrb" />
    <arg name="enable_emergency_stop" default="false" />

    <arg name="sim" value="true" if="$(optenv ROBOT_REAL false)" />
    <arg name="sim" value="false" unless="$(optenv ROBOT_REAL false)" />

    <arg name="use_manipulation" default="$(optenv USE_MANIPULATION true)" />
    <arg name="use_navigation" default="$(optenv USE_NAVIGATION false)" />
    <arg name="use_perception" default="$(optenv USE_PERCEPTION false)" />
    <arg name="use_task" default="$(optenv USE_TASK false)" />
    <arg name="use_teleop" default="$(optenv USE_TELEOP false)" />
    <arg name="use_web" default="$(optenv USE_WEB false)" />
    <arg name="use_geometry" default="$(optenv USE_GEOMETRY false)" />
    <arg name="map" default="$(optenv ROS_HOME ~/.ros)/map/map.yaml" />

    <!-- General remapping -->
    <remap from="/robot_description" to="$(arg namespace)/robot_description" />
    <remap from="robot_description" to="$(arg namespace)/robot_description" />

    <remap from="/hsrb/diagnostics" to="$(arg namespace)/diagnostics" />
    <remap from="/diagnostics" to="$(arg namespace)/diagnostics" />
    <remap from="diagnostics" to="$(arg namespace)/diagnostics" />

    <group ns="$(arg namespace)">
        <!-- TUe custom description -->
        <rosparam file="$(find hero_description)/custom/joint_groups.yaml" command="load" />
        <rosparam file="$(find hero_description)/custom/skills.yaml" command="load" />

        <!-- Phone UI -->
        <include file="$(find robot_launch_files)/launch/interaction/mobile_ui_server.launch">
            <arg name="machine" value="hero1" />
        </include>

    </group>


    <!-- Real hardware -->
    <group if="$(optenv ROBOT_REAL false)" >

        <!--Hero hardware startup -->
        <include file="$(find hero_bringup)/hsrb_bringup/launch/$(arg robot_name)_bringup.launch" unless="$(arg auto_start)">
            <arg name="namespace" value="$(arg namespace)" />
            <arg name="param_file" default="$(arg param_file)" />
            <arg name="use_laser_odom" value="$(arg use_laser_odom)" />
            <arg name="align_at_startup" value="$(arg align_at_startup)" />
            <arg name="robot_name" value="$(arg robot_name)" />
        </include>

        <include file="$(find hero_bringup)/hsrb_bringup/launch/hsrb_bringup_common.launch">
            <arg name="namespace" value="$(arg namespace)" />
            <arg name="use_hand_camera" value="$(arg use_hand_camera)" />
            <arg name="use_head_center_camera" value="$(arg use_head_center_camera)" />
            <arg name="use_head_stereo_camera" value="$(arg use_head_stereo_camera)"/>
            <arg name="use_head_rgbd_sensor" value="$(arg use_head_rgbd_sensor)"/>
            <arg name="use_laser_odom" value="$(arg use_laser_odom)" />
            <arg name="use_blackfly" value="$(arg use_blackfly)" />
            <arg name="enable_emergency_stop" value="$(arg enable_emergency_stop)" />
        </include>

        <group ns="$(arg namespace)">

            <!-- base range sensor -->
            <!-- only filter, as Totoya launch file launches the driver -->
            <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_scan_to_scan_filter_chain" >
                <rosparam command="load" file="$(find hero_bringup)/parameters/hardware/sensors/base_laser_filters_parameters.yaml" />
                <remap from="scan" to="base_scan" />
                <remap from="scan_filtered" to="base_laser/scan" />
            </node>
        </group>

    </group><!-- End of real hardware -->

    <!-- Launch simulator if we are not on a real robot -->
    <group unless="$(optenv ROBOT_REAL false)" >

        <group ns="$(arg namespace)">
            <!-- robot desctription -->
            <include file="$(find hsrb_description)/robots/upload_hsrb.launch" />
        </group>

        <!-- Start gazebo with correct environment -->
        <include file="$(find hero_bringup)/launch/simulation/simulation.launch" >
            <arg name="namespace" value="$(arg namespace)" />
            <arg name="debug" value="$(arg debug)" />
            <arg name="use_laser_odom" value="$(arg use_laser_odom)" />
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="param_file" value="$(arg param_file)" />
        </include>

        <!-- Needed by manipulation bridge, because it uses the Toyota Robot_object -->
        <group ns="$(arg namespace)/impedance_control">
            <rosparam file="$(find hsrb_impedance_control)/launch/configurations.yaml" command="load" />
        </group>

    </group><!-- End of simulator group -->

    <!-- TU/e namespace group -->
    <group ns="$(arg namespace)">

        <!-- HEAD CONTROL -->
        <include file="$(find robot_launch_files)/launch/manipulation/head.launch">
            <arg name="machine" value="hero1"/>
        </include>

        <!-- ROS to RGBD -->
        <group ns="head_rgbd_sensor">
            <node pkg="rgbd" type="rgbd_server" name="ros_to_rgbd">
                <remap from="output" to="rgbd" />
                <remap from="rgb_image" to="rgb/image_rect_color" />
                <remap from="cam_info" to="rgb/camera_info" />
                <remap from="depth_image" to="depth_registered/image" />
            </node>
        </group>

         <!-- SPEECH RECOGNITION -->
        <include file="$(find robot_launch_files)/launch/interaction/speech_recognition.launch">
            <arg name="machine" value="hero1"/>
            <arg name="dragonfly" value="false" />
        </include>


        <!-- common -->
<!--
        <include file="$(find hsrb_common_launch)/launch/hsrb_common.launch">
            <arg name="namespace" value="$(arg namespace)" />
            <arg name="sim" value="$(arg sim)" />
            <arg name="use_manipulation" default="$(arg use_manipulation)" />
            <arg name="use_navigation" default="$(arg use_navigation)" />
            <arg name="use_perception" default="$(arg use_perception)" />
            <arg name="use_task" default="$(arg use_task)" />
            <arg name="use_teleop" default="$(arg use_teleop)" />
            <arg name="use_web" default="$(arg use_web)" />
            <arg name="use_geometry" default="$(arg use_geometry)" />
            <arg name="map" default="$(arg map)" />
            <arg name="robot_name" value="$(arg robot_name)" />
        </include>
-->
        <!-- MANIPULATION -->
        <group>
            <!-- Attitude transition -->
            <include file="$(find hero_bringup)/hsrb_manipulation_launch/launch/safe_pose_changer.launch" >
                <arg name="namespace" value="$(arg namespace)" />
            </include>

            <!-- trajectory filter -->
            <include file="$(find hsrb_trajectory_filter)/launch/trajectory_filter.launch">
                <arg name="robot_name" value="$(arg robot_name)"/>
            </include>

			<!-- whole timeopt filter -->
			<include file="$(find hsrb_timeopt_ros)/launch/hsrb_timeopt_filter.launch">
		    </include>

            <!-- Finger impedance control in whole body -->
            <remap from="/hsrb/joint_states" to="$(arg namespace)/joint_states" />
            <remap from="/hsrb/odom" to="$(arg namespace)/base/measurements" />
            <remap from="/hsrb/arm_trajectory_controller/command" to="$(arg namespace)/arm_trajectory_controller/command" />
            <remap from="/hsrb/omni_base_controller/command" to="$(arg namespace)/omni_base_controller/command" />
            <include file="$(find hero_bringup)/hsrb_impedance_control/launch/impedance_control_node.launch" ns="$(arg namespace)" if="$(optenv ROBOT_REAL false)" >
                <arg name="namespace" value="$(arg namespace)" />
            </include>

            <!-- Move the planner -->
            <arg name="analytic_ik_plugin" default="hsrb_analytic_ik::HsrbIKSolver" />
            <include file="$(find hsrb_manipulation_launch)/launch/planner.launch">
                <arg name="analytic_ik_plugin" value="$(arg analytic_ik_plugin)" />
            </include>

            <!-- perspective transformer -->
            <include file="$(find hsrb_manipulation_launch)/launch/interactive_grasp_planner.launch">
                <arg name="robot_name" value="$(arg robot_name)"/>
            </include>
        </group>

        <!-- MoveIt -->
        <include file="$(find hero_bringup)/hsrb_moveit_config/launch/move_group.launch">
            <arg name="joint_states_topic" value="$(arg namespace)/joint_states"/>
            <arg name="moveit_octomap_sensor_params_file" value="$(find hero_bringup)/hsrb_moveit_config/config/sensors_xtion.yaml" />
        </include>

        <!-- bridge nodes-->
        <node pkg="hero_bridge" type="speech.py" name="text_to_speech"/>
        <node pkg="hero_bridge" type="joint_trajectory.py" name="arm_bridge"/>
        <node pkg="hero_bridge" type="gripper_controller.py" name="gripper_bridge"/>
        <node pkg="hero_bridge" type="tf_ghost.py" name="tf_ghost"/>
        <node pkg="hero_bridge" type="head_controller.py" name="head_bridge"/>
        <node pkg="hero_bridge" type="handover_detection.py" name="handoverdetector"/>

        <group unless="$(optenv ROBOT_REAL false)">
            <node pkg="hero_bridge" type="light_bridge.py" name="light_bridge"/>
        </group>

        <include file="$(find hero_bridge)/launch/manipulation_bridge.launch" />

    </group> <!-- End of TU/e namespace group -->
</launch>
