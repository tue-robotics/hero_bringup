#!/usr/bin/env python

import sys
import os.path
import pwd

from argparse import ArgumentParser

SERVICE_FILE = """
[Unit]
Description={description}

[Install]
WantedBy=multi-user.target

[Service]
User={user}
Restart=on-abort
ExecStart=/bin/bash -c 'source {source_file} && rosnode kill /state_machine && roslaunch {launch_file} --wait'
"""


def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("The file %s does not exist!" % arg)
    else:
        return arg


def is_valid_user(parser, arg):
    if arg not in pwd.getpwall():
        parser.error("The user %s does not exist!" % arg)
    else:
        return arg


def get_package_name(launch_file):
    launch_file_folders = launch_file.split("/")[:-1]
    while launch_file_folders:
        package_xml = "/".join(launch_file_folders) + "/package.xml"
        if os.path.exists(package_xml):
            return launch_file_folders[-1]
        launch_file_folders = launch_file_folders[:-1]
    return "unknown package"


if __name__ == "__main__":
    parser = ArgumentParser(description="systemd_service_from_launch_file")
    parser.add_argument(
        "launch_file", help="Launch file to generate a service from", type=lambda x: is_valid_file(parser, x)
    )
    parser.add_argument("user", help="The user that should execute the launch file", type=str)
    parser.add_argument(
        "environment_bash", help="Bash environment to run before", type=lambda x: is_valid_file(parser, x)
    )
    args = parser.parse_args()

    launch_file = os.path.abspath(args.launch_file)
    environment_bash = os.path.abspath(args.environment_bash)
    user = args.user
    description = (
        f"Launch file {os.path.basename(launch_file)} of package {get_package_name(launch_file)} for user {user}"
    )

    print(
        SERVICE_FILE.format(description=description, user=user, source_file=environment_bash, launch_file=launch_file)
    )

    sys.exit(0)
