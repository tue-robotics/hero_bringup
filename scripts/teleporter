#!/usr/bin/env python


import rospy
from cb_base_navigation.msg import LocalPlannerActionGoal
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseWithCovariance, Pose, Quaternion, Point
from math import atan2
from tf.transformations import quaternion_from_euler


def goal_cb(msg):
    if not msg.goal.plan:
        return

    position = msg.goal.plan[-1].pose.position
    look_at = msg.goal.orientation_constraint.look_at
    angle = atan2(look_at.y - position.y, look_at.x - position.x) + msg.goal.orientation_constraint.angle_offset

    publisher.publish(PoseWithCovarianceStamped(
        header=msg.goal.plan[-1].header,
        pose=PoseWithCovariance(
            pose=Pose(
                position=msg.goal.plan[-1].pose.position,
                orientation=Quaternion(*quaternion_from_euler(0, 0, angle))
            ),
            covariance=[0.01, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.02]
        )
    ))


rospy.init_node('teleporter')

rospy.Subscriber('/hero/local_planner/action_server/goal', LocalPlannerActionGoal, goal_cb, queue_size=1)
publisher = rospy.Publisher('/hero/initialpose', PoseWithCovarianceStamped, queue_size=1)
rospy.spin()
